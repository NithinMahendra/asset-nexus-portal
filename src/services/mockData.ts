
// This file is automatically generated. Do not edit it directly.

import { Asset, AssetCategory, AssetHistory, AssetStatus, DashboardStats, Notification, User, UserRole } from "@/types";

export const mockUsers: User[] = [
  {
    id: '1',
    name: 'John Doe',
    email: 'john.doe@example.com',
    phone: '123-456-7890',
    department: 'IT',
    role: 'admin',
    profileImageUrl: 'https://i.pravatar.cc/150?img=1'
  },
  {
    id: '2',
    name: 'Jane Smith',
    email: 'jane.smith@example.com',
    phone: '987-654-3210',
    department: 'HR',
    role: 'viewer',
    profileImageUrl: 'https://i.pravatar.cc/150?img=2'
  },
  {
    id: '3',
    name: 'Alice Johnson',
    email: 'alice.johnson@example.com',
    phone: '555-123-4567',
    department: 'Finance',
    role: 'viewer',
    profileImageUrl: 'https://i.pravatar.cc/150?img=3'
  },
  {
    id: '4',
    name: 'Bob Williams',
    email: 'bob.williams@example.com',
    phone: '111-222-3333',
    department: 'Marketing',
    role: 'admin',
    profileImageUrl: 'https://i.pravatar.cc/150?img=4'
  },
  {
    id: '5',
    name: 'Charlie Brown',
    email: 'charlie.brown@example.com',
    phone: '444-555-6666',
    department: 'Operations',
    role: 'viewer',
    profileImageUrl: 'https://i.pravatar.cc/150?img=5'
  },
];

// Set a default current user for the application (first user)
export const currentUser: User = mockUsers[0];

export const mockAssets: Asset[] = [
  {
    id: '101',
    name: 'Dell Laptop',
    category: 'laptop',
    status: 'available',
    purchaseDate: '2022-01-15',
    warrantyExpiry: '2025-01-15',
    location: 'New York Office',
    serialNumber: 'ABC123XYZ',
    model: 'Latitude 5520',
    description: 'Standard Dell laptop for office use.',
    value: 1200
  },
  {
    id: '102',
    name: 'HP Printer',
    category: 'printer',
    status: 'assigned',
    purchaseDate: '2021-11-01',
    warrantyExpiry: '2024-11-01',
    location: 'Los Angeles Office',
    assignedTo: mockUsers[1],
    assignedDate: '2023-03-20',
    serialNumber: 'PRN456HP',
    model: 'LaserJet Pro M404dn',
    description: 'High-quality laser printer.',
    value: 350
  },
  {
    id: '103',
    name: 'Samsung Monitor',
    category: 'monitor',
    status: 'repair',
    purchaseDate: '2022-05-20',
    warrantyExpiry: '2025-05-20',
    location: 'Chicago Office',
    serialNumber: 'MON789SAM',
    model: '27-Inch LED',
    description: '27-inch LED monitor for graphic design.',
    value: 300
  },
  {
    id: '104',
    name: 'Cisco Router',
    category: 'networking',
    status: 'available',
    purchaseDate: '2023-02-10',
    warrantyExpiry: '2026-02-10',
    location: 'San Francisco Office',
    serialNumber: 'CIS101NET',
    model: 'Cisco 881',
    description: 'High-speed network router.',
    value: 800
  },
  {
    id: '105',
    name: 'iPhone 13',
    category: 'mobile',
    status: 'assigned',
    purchaseDate: '2022-09-01',
    warrantyExpiry: '2025-09-01',
    location: 'Remote',
    assignedTo: mockUsers[3],
    assignedDate: '2023-04-15',
    serialNumber: 'MB123IPH',
    model: 'iPhone 13 Pro',
    description: 'Mobile phone for sales team.',
    value: 900
  },
];

// Exporting mockAssets as 'assets' for backward compatibility
export const assets = mockAssets;

export const mockAssetHistory: AssetHistory[] = [
  {
    id: '201',
    assetId: '102',
    action: 'assigned',
    date: '2023-03-20',
    userId: '2',
    userName: 'Jane Smith',
    details: 'Assigned to Jane Smith for HR duties.'
  },
  {
    id: '202',
    assetId: '105',
    action: 'assigned',
    date: '2023-04-15',
    userId: '4',
    userName: 'Bob Williams',
    details: 'Assigned to Bob Williams for marketing purposes.'
  },
  {
    id: '203',
    assetId: '103',
    action: 'status_changed',
    date: '2023-05-01',
    userId: '1',
    userName: 'John Doe',
    details: 'Status changed to repair due to screen issues.'
  },
];

export const mockNotifications: Notification[] = [
  {
    id: '301',
    userId: '2',
    title: 'Asset Assigned',
    message: 'You have been assigned a new HP Printer.',
    date: '2023-03-20',
    read: false,
    type: 'info',
    link: '/assets/102'
  },
  {
    id: '302',
    userId: '4',
    title: 'Asset Assigned',
    message: 'You have been assigned a new iPhone 13 Pro.',
    date: '2023-04-15',
    read: false,
    type: 'info',
    link: '/assets/105'
  },
  {
    id: '303',
    userId: '1',
    title: 'Asset Status Changed',
    message: 'The status of Samsung Monitor MON789SAM has been changed to repair.',
    date: '2023-05-01',
    read: false,
    type: 'warning',
    link: '/assets/103'
  },
];

export const mockDashboardStats: DashboardStats = {
  totalAssets: 5,
  availableAssets: 2,
  assignedAssets: 2,
  repairAssets: 1,
  retiredAssets: 0,
  usersCount: 5,
  assetsValueTotal: 3550,
  recentlyAssigned: 2,
  warrantyExpiringCount: 1
};

export const mockCategoryBreakdown = [
  { category: 'laptop' as AssetCategory, count: 1, percentage: 20 },
  { category: 'printer' as AssetCategory, count: 1, percentage: 20 },
  { category: 'monitor' as AssetCategory, count: 1, percentage: 20 },
  { category: 'networking' as AssetCategory, count: 1, percentage: 20 },
  { category: 'mobile' as AssetCategory, count: 1, percentage: 20 },
];

// Helper function to get user notifications
export const getUserNotifications = (userId: string): Notification[] => {
  return mockNotifications.filter(notification => notification.userId === userId);
};

// Helper function to get dashboard stats
export const getDashboardStats = (): DashboardStats => {
  return mockDashboardStats;
};

// Helper function to get category breakdown
export const getCategoryBreakdown = () => {
  return mockCategoryBreakdown;
};

// Helper function to get assets by status
export const getAssetsByStatus = () => {
  const statusCounts: Record<string, number> = {};
  
  // Count assets by status
  mockAssets.forEach(asset => {
    if (!statusCounts[asset.status]) {
      statusCounts[asset.status] = 0;
    }
    statusCounts[asset.status]++;
  });
  
  // Convert to format needed for charts
  return Object.entries(statusCounts).map(([name, value]) => ({
    name,
    value
  }));
};
